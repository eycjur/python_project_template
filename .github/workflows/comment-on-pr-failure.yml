name: 'Comment on PR when Another Workflow Fails'

on:
  workflow_run:
    workflows:
      - 'CI'
      - 'container_security.yml'
    types:
      - completed

jobs:
  notify_failed_pr:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest

    steps:
      # 1) ZIP „ÇíËß£Âáç„Åô„Çã„Åü„ÇÅ„ÅÆ‰æùÂ≠ò„É©„Ç§„Éñ„É©„É™„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
      - name: Install unzip library
        run: npm install adm-zip

      - name: Post failure details to PR
        uses: actions/github-script@v7
        with:
          script: |
            const AdmZip = require('adm-zip');
            const run = context.payload.workflow_run;
            const prs = run.pull_requests;
            if (prs.length === 0) {
              console.log('No pull request associated; skipping comment.');
              return;
            }

            // 2) ÂÖ®„É≠„Ç∞„ÅÆ ZIP „ÇíÂèñÂæó
            const zipResp = await github.rest.actions.downloadWorkflowRunLogs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id,
            });
            // zipResp.data „ÅØ ArrayBuffer Áõ∏ÂΩì„ÅÆ„Éê„Ç§„Éä„É™
            const zip = new AdmZip(Buffer.from(await zipResp.data.arrayBuffer()));

            // 3) Â§±Êïó„Ç∏„Éß„Éñ„Çí„É™„Çπ„Éà„Ç¢„ÉÉ„Éó
            const jobsResp = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id,
            });
            const failedJobs = jobsResp.data.jobs.filter(j => j.conclusion === 'failure');

            // 4) „Ç≥„É°„É≥„ÉàÊú¨Êñá„ÇíÁµÑ„ÅøÁ´ã„Å¶
            let body = `üö® **Workflow '${run.name}' failed** üö®\n\n`;
            for (const job of failedJobs) {
              // „Ç∏„Éß„ÉñÂêç„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„Ç®„É≥„Éà„É™„ÇíÊäΩÂá∫Ôºà‰æã: "CI/1234567890/xyz/job_name.txt"Ôºâ
              const entry = zip.getEntries().find(e =>
                e.entryName.endsWith(`/${job.name.replace(/\s+/g, '_')}.txt`)
              );
              let tail = '(„É≠„Ç∞ÂèñÂæó„Ç®„É©„Éº)';
              if (entry) {
                const text = entry.getData().toString('utf8');
                const lines = text.split('\n');
                tail = lines.slice(-50).join('\n');
              }

              body += `### ‚ùå ${job.name}\n`;
              body += `- [View full logs](${job.html_url})\n\n`;
              body += '```bash\n';
              body += `${tail}\n`;
              body += '```\n\n';
            }

            // PR„Åî„Å®„Å´„Ç≥„É°„É≥„Éà
            for (const pr of prs) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body,
              });
            }
